chartSeries(data(), theme = chartTheme("white"),
type = "line", log.scale = input$log, TA = NULL)
})
}
runApp()
server <- function(input, output) {
dataInput <- reactive({
getSymbols(input$symb, src = "yahoo",
from = input$dates[1],
to = input$dates[2],
auto.assign = FALSE)
})
data <- reactive({
if(!input$adjust) return(dataInput())
adjust(dataInput())
})
output$plot <- renderPlot({
chartSeries(data(), theme = chartTheme("white"),
type = "line", log.scale = input$log, TA = NULL)
})
}
# Run the app
shinyApp(ui, server)
library(shiny)
library(maps)
library(mapproj)
source("./Problema 4 - Cris e Inês.R")
setwd("C:/Users/Ines_/OneDrive/Documentos/estagio/Pre-Estagio/AbatesOrganizacao")
library(shiny)
library(maps)
library(mapproj)
source("./Problema 4 - Cris e Inês.R")
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
sidebarLayout(
sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(verbatimTextOutput(outputId = "mapa"))
)
)
server <- function(input, output) {
output$mapa <- renderPrint({
switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
})
}
# Run app ----
shinyApp(ui, server)
Codme <- fread("./Cód_ME_DiCo.csv") %>% unique
source("./Problema 4 - Cris e Inês.R")
View(Codme)
getwd()
source("./Problema 4 - Cris e Inês.R")
Codme <- fread("./Cód_ME_DiCo.csv") %>% unique
Total_Caract_Expl <- fread("./FicheiroTotalCaracterizacaoExploracoes-2022-10-04.csv")
Freguesias <- fread("./Correspondências freg 2013-14.csv")
library(tidyverse)
library(data.table)
library(plotly)
library(janitor)
library(RColorBrewer)
library(leaflet)
library(sf)
library(lubridate)
library(measurements)
library(shiny)
library(maps)
library(mapproj)
source("./Problema 4 - Cris e Inês.R")
?source
Codme <- fread("./Cód_ME_DiCo.csv") %>% unique
source("./Problema 4 - Cris e Inês.R")
source("./Problema 4 - Cris e Inês.R")
source("./Problema 4 - Cris e Inês.R")
source("./Problema 4 - Cris e Inês.R")
source("./Problema 4 - Cris e Inês.R", encoding = "utf-8")
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
sidebarLayout(
sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(verbatimTextOutput(outputId = "mapa"))
)
)
server <- function(input, output) {
output$mapa <- renderPrint({
switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
})
}
# Run app ----
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
sidebarLayout(
sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(print(SantaCarnes_leaflet))
)
)
server <- function(input, output) {
output$mapa <- renderPrint({
switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
})
}
# Run app ----
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
sidebarLayout(
sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(verbatimTextOutput(outputId = "mapa"))
)
)
server <- function(input, output) {
output$mapa <- renderPrint({
datamap <- switch(input$var,
"Santa Carnes" = pSantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
print(datamap)
})
}
# Run app ----
shinyApp(ui, server)
server <- function(input, output) {
output$mapa <- renderPrint({
datamap <- switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
print(datamap)
})
}
# Run app ----
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
sidebarLayout(
sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(textOutput(outputId = "mapa"))
)
)
# Run app ----
shinyApp(ui, server)
server <- function(input, output) {
output$mapa <- renderPrint({
datamap <- switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
print("merda")
})
}
# Run app ----
shinyApp(ui, server)
server <- function(input, output) {
output$mapa <- renderPrint({
datamap <- switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
print(datamap)
})
}
class(datamap)
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
sidebarLayout(
sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(imageOutput(outputId = "mapa"))
)
)
server <- function(input, output) {
output$mapa <- renderImage({
datamap <- switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
print(datamap)
})
}
# Run app ----
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
sidebarLayout(
sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(leafletOutput(outputId = "mapa"))
)
)
server <- function(input, output) {
output$mapa <- renderLeaflet({
datamap <- switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
print(datamap)
})
}
# Run app ----
shinyApp(ui, server)
server <- function(input, output) {
output$mapa <- renderLeaflet({
switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
})
}
# Run app ----
shinyApp(ui, server)
# Run app ----
shinyApp(ui, server)
library(shiny)
library(maps)
library(mapproj)
source("./Problema 4 - Cris e Inês.R", encoding = "utf-8")
# User interface ----
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
sidebarLayout(
sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(leafletOutput(outputId = "mapa"))
)
)
# Server logic ----
server <- function(input, output) {
server <- function(input, output) {
output$mapa <- renderLeaflet({
switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
})
}
View(server)
Run app ----
# Run app ----
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
sidebarLayout(
sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(leafletOutput(outputId = "mapa"))
)
)
View(ui)
# Run app ----
shinyApp(ui, server)
library(shiny)
library(maps)
library(mapproj)
source("./Problema 4 - Cris e Inês.R", encoding = "utf-8")
# Run app ----
shinyApp(ui, server)
setwd("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organizacao")
setwd("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/AbatesOrganizacao")
library(data.table)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(zoo)
library(xts)
#
Abates <- fread("./Abates.csv")
Abates[, 7] <- as.numeric(as.character(sub("," , ".", Abates$Peso)))
#
#Nº de abates por mês/ano
Abates_by_Time <- Abates %>%
group_by(Data_abate) %>%
summarise(numero_abates_data = n()) %>%
as.data.frame()
Abates_by_Time <- Abates_by_Time %>%
mutate(Day = day(Data_abate), Month = month(Data_abate), Year = year(Data_abate))
Stats <- Abates_by_Time %>%
group_by(Year,Month) %>%
summarise(Avg = mean(numero_abates_data))
#Using Yearmon we retain the class of date.
Stats$Data <- as.yearmon(paste(Stats$Year, Stats$Month),
"%Y %m")
#Ver a evolução ao longo do tempo;
Graph <- Stats %>%
ggplot(aes(Data, Avg)) +
geom_point(na.rm=TRUE, color="purple", size=1) +
ggtitle("Evolução de Abates 2013 - 2017") +
xlab("Data") + ylab("Abates") +
geom_smooth(method='lm')
Graph
#kg por mês/ano por matadouro
#Abates por Matadouro 2013-2017
Abates_by_Matadouro <- Abates %>%
group_by(Matadouro) %>%
summarise(numero_abates = n())
Peso_by_Matadouro_Year <- Abates %>%
mutate(Month = month(Data_abate), Year = year(Data_abate)) %>%
select(Matadouro, Peso, Month, Year)
Peso_by_Matadouro_Year$Data <- as.yearmon(paste(Peso_by_Matadouro_Year$Year,
Peso_by_Matadouro_Year$Month), "%Y %m")
Peso_by_Matadouro_Year <- Peso_by_Matadouro_Year %>%
group_by(Matadouro, Data) %>%
summarise(Avg = mean(Peso)) %>%
na.exclude()
#Visualization
#Dont work, will come back to it e VAMOS IGNORAR ;)
#Graph_M_Y <- Peso_by_Matadouro_Year %>%
#ggplot(aes(fill=Data, x=Matadouro, y=Avg)) +
#geom_bar(position = "dodge", stat = "identity") +
#ggtitle("Média Peso/Abates por Matadouro 2013 - 2017") +
#xlab("Matadouro") + ylab("Média de Peso")
#Graph_M_Y
#kg por mês/ano por exploração.
Abates_by_Expl <- Abates %>%
group_by(Exploracao) %>%
summarise(numero_abates = n())
Peso_by_Expl_Year <- Abates %>%
mutate(Month = month(Data_abate), Year = year(Data_abate)) %>%
select(Exploracao, Peso, Month, Year)
Peso_by_Expl_Year$Data <- as.yearmon(paste(Peso_by_Expl_Year$Year, Peso_by_Expl_Year$Month),
"%Y %m")
Peso_by_Expl_Year <- Peso_by_Expl_Year %>%
group_by(Exploracao, Data) %>%
summarise(Avg = mean(Peso))
#Ver se há Sazonalidade nos abates
# Inverno: 21/12 - 20/03
# Primavera: 21/03 - 20/06
# Verão: 21/06 - 20/09
# Outono: 21/09 - 20/12
#Jeronimo
Abates_by_Time$Data_abate <- as.Date(Abates_by_Time$Data_abate)
#install.packages("hydroTSM")
library(hydroTSM)
Abates_by_Time$Season <- time2season(Abates_by_Time$Data_abate,
out.fmt = "seasons")
Abates_by_Season <- Abates_by_Time %>%
group_by(Season) %>%
summarise(numero_abates_data = n())
Abates_by_Season
# Passando para o segundo objetivo
# Relacionar abates com a exportação do INE
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organizacao/Dados_INE_2013_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),]
row.names(Dados_exportações)[1] <- "Data de Exportação"
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/AbatesOrganizacao/Dados_INE_2013_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),]
row.names(Dados_exportações)[1] <- "Data de Exportação"
row.names(Dados_exportações)[2] <- "Animais vivos e produtos do reino animal"
print(Dados_exportações)
Dados_exportações <- as.data.frame(t(Dados_exportações))
# TENTATIVAS
test_zoo <- Dados_exportações %>%
mutate(yearmonth = zoo::as.yearmon("Data de Exportação"))
table(test_zoo$yearmon)
# Ficou uma coluna só com o mês e o ano fugiu
x <- separate(Dados_exportações, V1, into = "Mês", sep = "[^[:alnum:]]+",
remove = FALSE,
convert = TRUE,
extra = "warn",
fill = "warn")
paste0 ("Data de exportação", sep = " ", collapse = NULL, recycle0 = FALSE)
Dados_exportações$Data <- as.yearmon(paste(Dados_exportações$Year, Dados_exportações$Month),
"%Y %m")
View(Dados_exportações)
View(x)
add_missing_endmark(Dados_exportações, replacement = "ç", endmarks = c("?"))
install.packages(textclean)
install.packages("textclean")
library((textclean))
library("textclean")
add_missing_endmark(Dados_exportações, replacement = "ç", endmarks = c("?"))
add_missing_endmark(Dados_exportações,V1, replacement = "ç", endmarks = c("?"))
add_missing_endmark(Dados_exportações,"V1", replacement = "ç", endmarks = c("?"))
add_missing_endmark(Dados_exportações,"Data de Exportação", replacement = "ç", endmarks = c("?"))
add_missing_endmark(Dados_exportações$V1, replacement = "ç", endmarks = c("?"))
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/AbatesOrganizacao/Dados_INE_2013_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),]
row.names(Dados_exportações)[1] <- "Data de Exportação"
row.names(Dados_exportações)[2] <- "Animais vivos e produtos do reino animal"
print(Dados_exportações)
Dados_exportações <- as.data.frame(t(Dados_exportações))
library("textclean")
replace_symbol(Dados_exportações$V1, replacement = "ç", symbols = c("?"))
?replace_names
?sub
replace(Dados_exportações$V1, "?", "ç")
Dados_exportações <- as.data.frame(t(Dados_exportações)) %>%
replace(Dados_exportações$V1, "?", "ç")
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/AbatesOrganizacao/Dados_INE_2013_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),]
row.names(Dados_exportações)[1] <- "Data de Exportação"
row.names(Dados_exportações)[2] <- "Animais vivos e produtos do reino animal"
print(Dados_exportações)
Dados_exportações <- as.data.frame(t(Dados_exportações))
Dados_exportações <- as.data.frame(t(Dados_exportações)) %>%
replace(Dados_exportações$V1, "?", "ç")
replace(Dados_exportações$V1, "?", "ç")
Dados_exportações%>%
mutate("V1"= case_when(
.$V1=="Janeiro" ~ 01,
.$V1=="Fevereiro" ~ 02,
.$V1=="Abril" ~ 04,
.$V1=="Maio" ~ 05
))
Dados_exportações %>%
mutate("V1"= case_when(
.$V1=="Janeiro" ~ 01,
.$V1=="Fevereiro" ~ 02,
.$V1=="Abril" ~ 04,
.$V1=="Maio" ~ 05
))
y <- Dados_exportações %>%
mutate("V1"= case_when(
.$V1=="Janeiro" ~ 01,
.$V1=="Fevereiro" ~ 02,
.$V1=="Abril" ~ 04,
.$V1=="Maio" ~ 05
))
View(y)
y <- Dados_exportações %>%
mutate(V1 = case_when(
.$V1=="Janeiro" ~ 01,
.$V1=="Fevereiro" ~ 02,
.$V1=="Abril" ~ 04,
.$V1=="Maio" ~ 05,
.$V1=="Junho" ~ 06,
.$V1=="Julho" ~ 07,
.$V1=="Agosto" ~ 08,
.$V1=="Setembro" ~ 09,
.$V1=="Outubro" ~ 10,
.$V1=="Novembro" ~ 11,
.$V1=="Dezembro" ~ 12,
.$V1=="Mar\xe7o" ~ 03,
))
