sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(plotOutput(server))
)
)
# Run app ----
shinyApp(ui, server)
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
sidebarLayout(
sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(plotOutput("server"))
)
)
# Run app ----
shinyApp(ui, server)
server <- function(input, output) {
renderPrint(switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet))
}
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
sidebarLayout(
sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(plotOutput())
)
)
server <- function(input, output) {
output$mapa <- renderPrint({
data <- switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
print(data)
})
}
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
sidebarLayout(
sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(plotOutput(outputId = "mapa"))
)
)
server <- function(input, output) {
output$mapa <- renderPrint({
data <- switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
print(data)
})
}
# Run app ----
shinyApp(ui, server)
server <- function(input, output) {
output$mapa <- renderPrint({
data <- switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
View(data)
})
}
# Run app ----
shinyApp(ui, server)
server <- function(input, output) {
output$mapa <- renderPrint({
data <- switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
print(data)
})
}
?outputOptions
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
sidebarLayout(
sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(verbatimTextOutput(outputId = "mapa"))
)
)
server <- function(input, output) {
output$mapa <- renderPrint({
data <- switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
print(data)
})
}
# Run app ----
shinyApp(ui, server)
?renderPrint
ui <- fluidPage(
titlePanel("Mapas Top3 Matadouros PT"),
sidebarLayout(
sidebarPanel(
helpText("Representação geográfica da área de captação dos principais
matadouros portugueses."),
selectInput("var",
label = "Escolha o matadouro pretendido:",
choices = c("Santa Carnes", "Raporal",
"Regional de Mafra"),
selected = "Santa Carnes")
),
mainPanel(verbatimTextOutput(outputId = "mapa"))
)
)
server <- function(input, output) {
output$mapa <- renderPrint({
switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
})
}
# Run app ----
shinyApp(ui, server)
server <- function(input, output) {
output$mapa <- renderPrint({
print(switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
)
})
}
# Run app ----
shinyApp(ui, server)
?switch
server <- function(input, output) {
output$mapa <- renderPrint({
switch(input$var,
"Santa Carnes" = SantaCarnes_leaflet,
"Raporal" = Raporal_leaflet,
"Regional de Mafra" = RegMafra_leaflet)
})
}
# Run app ----
shinyApp(ui, server)
runApp()
runApp()
runApp()
runApp()
Abates <- fread("./Abates.csv")
Abates1 <- select(Abates, Matadouro, MAC, Tipo_abate, Exploracao, Raca) %>%
mutate(Matadouro = (str_replace(Matadouro,c("<",">"),""))) %>%
mutate(Raca = (str_replace(Raca,c("<",">"),"")))
View(Abates)
View(Abates1)
setwd("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organização")
#kg por mês/ano por exploração.
Abates_by_Expl <- Abates %>%
group_by(Exploracao) %>%
summarise(numero_abates = n())
setwd("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organizacao")
library(data.table)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(zoo)
library(xts)
#
Abates <- fread("./Abates.csv")
Abates[, 7] <- as.numeric(as.character(sub("," , ".", Abates$Peso)))
#
#Nº de abates por mês/ano
Abates_by_Time <- Abates %>%
group_by(Data_abate) %>%
summarise(numero_abates_data = n()) %>%
as.data.frame()
Abates_by_Time <- Abates_by_Time %>%
mutate(Day = day(Data_abate), Month = month(Data_abate), Year = year(Data_abate))
Stats <- Abates_by_Time %>%
group_by(Year,Month) %>%
summarise(Avg = mean(numero_abates_data))
#Using Yearmon we retain the class of date.
Stats$Data <- as.yearmon(paste(Stats$Year, Stats$Month),
"%Y %m")
#Ver a evolução ao longo do tempo;
Graph <- Stats %>%
ggplot(aes(Data, Avg)) +
geom_point(na.rm=TRUE, color="purple", size=1) +
ggtitle("Evolução de Abates 2013 - 2017") +
xlab("Data") + ylab("Abates") +
geom_smooth(method='lm')
Graph
#kg por mês/ano por matadouro
#Abates por Matadouro 2013-2017
Abates_by_Matadouro <- Abates %>%
group_by(Matadouro) %>%
summarise(numero_abates = n())
Peso_by_Matadouro_Year <- Abates %>%
mutate(Month = month(Data_abate), Year = year(Data_abate)) %>%
select(Matadouro, Peso, Month, Year)
Peso_by_Matadouro_Year$Data <- as.yearmon(paste(Peso_by_Matadouro_Year$Year,
Peso_by_Matadouro_Year$Month), "%Y %m")
Peso_by_Matadouro_Year <- Peso_by_Matadouro_Year %>%
group_by(Matadouro, Data) %>%
summarise(Avg = mean(Peso)) %>%
na.exclude()
#Visualization
#Dont work, will come back to it e VAMOS IGNORAR ;)
Graph_M_Y <- Peso_by_Matadouro_Year %>%
ggplot(aes(fill=Data, x=Matadouro, y=Avg)) +
geom_bar(position = "dodge", stat = "identity") +
ggtitle("Média Peso/Abates por Matadouro 2013 - 2017") +
xlab("Matadouro") + ylab("Média de Peso")
Graph_M_Y
#kg por mês/ano por exploração.
Abates_by_Expl <- Abates %>%
group_by(Exploracao) %>%
summarise(numero_abates = n())
Peso_by_Expl_Year <- Abates %>%
mutate(Month = month(Data_abate), Year = year(Data_abate)) %>%
select(Exploracao, Peso, Month, Year)
Peso_by_Expl_Year$Data <- as.yearmon(paste(Peso_by_Expl_Year$Year, Peso_by_Expl_Year$Month),
"%Y %m")
Peso_by_Expl_Year <- Peso_by_Expl_Year %>%
group_by(Exploracao, Data) %>%
summarise(Avg = mean(Peso))
#Ver se há Sazonalidade nos abates
# Inverno: 21/12 - 20/03
# Primavera: 21/03 - 20/06
# Verão: 21/06 - 20/09
# Outono: 21/09 - 20/12
# Agrupamento por mês e dia
Stats1 <- Abates_by_Time %>%
group_by(Month,Day,Year) %>%
summarise(Avg = mean(numero_abates_data))
ggplot(Stats1, aes(x=factor(Month), y=Avg))+
geom_boxplot()+
ylab('Média de abates')+
xlab('Mês')+
theme_bw()
# Está um gráfico e dá para ver quando há mais abates, podia estar pior ahahah Mas ainda temos de ver se há uma melhor maneira de representar
# Passando para o segundo objetivo
# Relacionar abates com a exportação do INE
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organização/Dados_INE_2023_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),]
months <- c("Janeiro","Fevereiro", "Março", "Abril","Maio","Junho", "Julho", "Agosto", "Setemnro", "Outubro", "Novembro", "Dezembro")
y <- as.integer(factor(months, levels = month.name)) %>% na.omit(months) %>% na.action(months)
Datas_titulos <- Dados_exportações[c(1),]
#Estou e tentar converter a data em números eu sei que já fizemos isto, mas está complicado
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organizacao/Dados_INE_2013_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),]
months <- c("Janeiro","Fevereiro", "Março", "Abril","Maio","Junho", "Julho", "Agosto", "Setemnro", "Outubro", "Novembro", "Dezembro")
y <- as.integer(factor(months, levels = month.name)) %>% na.omit(months) %>% na.action(months)
Datas_titulos <- Dados_exportações[c(1),]
#Estou e tentar converter a data em números eu sei que já fizemos isto, mas está complicado
setwd("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organizacao")
library(data.table)
library(dplyr)
library(ggplot2)
library(tidyverse)
library(lubridate)
library(zoo)
library(xts)
#
Abates <- fread("./Abates.csv")
Abates[, 7] <- as.numeric(as.character(sub("," , ".", Abates$Peso)))
#
#Nº de abates por mês/ano
Abates_by_Time <- Abates %>%
group_by(Data_abate) %>%
summarise(numero_abates_data = n()) %>%
as.data.frame()
Abates_by_Time <- Abates_by_Time %>%
mutate(Day = day(Data_abate), Month = month(Data_abate), Year = year(Data_abate))
Stats <- Abates_by_Time %>%
group_by(Year,Month) %>%
summarise(Avg = mean(numero_abates_data))
#Using Yearmon we retain the class of date.
Stats$Data <- as.yearmon(paste(Stats$Year, Stats$Month),
"%Y %m")
#Ver a evolução ao longo do tempo;
Graph <- Stats %>%
ggplot(aes(Data, Avg)) +
geom_point(na.rm=TRUE, color="purple", size=1) +
ggtitle("Evolução de Abates 2013 - 2017") +
xlab("Data") + ylab("Abates") +
geom_smooth(method='lm')
Graph
#kg por mês/ano por matadouro
#Abates por Matadouro 2013-2017
Abates_by_Matadouro <- Abates %>%
group_by(Matadouro) %>%
summarise(numero_abates = n())
Peso_by_Matadouro_Year <- Abates %>%
mutate(Month = month(Data_abate), Year = year(Data_abate)) %>%
select(Matadouro, Peso, Month, Year)
Peso_by_Matadouro_Year$Data <- as.yearmon(paste(Peso_by_Matadouro_Year$Year,
Peso_by_Matadouro_Year$Month), "%Y %m")
Peso_by_Matadouro_Year <- Peso_by_Matadouro_Year %>%
group_by(Matadouro, Data) %>%
summarise(Avg = mean(Peso)) %>%
na.exclude()
#Visualization
#Dont work, will come back to it e VAMOS IGNORAR ;)
Graph_M_Y <- Peso_by_Matadouro_Year %>%
ggplot(aes(fill=Data, x=Matadouro, y=Avg)) +
geom_bar(position = "dodge", stat = "identity") +
ggtitle("Média Peso/Abates por Matadouro 2013 - 2017") +
xlab("Matadouro") + ylab("Média de Peso")
Graph_M_Y
#kg por mês/ano por exploração.
Abates_by_Expl <- Abates %>%
group_by(Exploracao) %>%
summarise(numero_abates = n())
Peso_by_Expl_Year <- Abates %>%
mutate(Month = month(Data_abate), Year = year(Data_abate)) %>%
select(Exploracao, Peso, Month, Year)
Peso_by_Expl_Year$Data <- as.yearmon(paste(Peso_by_Expl_Year$Year, Peso_by_Expl_Year$Month),
"%Y %m")
Peso_by_Expl_Year <- Peso_by_Expl_Year %>%
group_by(Exploracao, Data) %>%
summarise(Avg = mean(Peso))
#Ver se há Sazonalidade nos abates
# Inverno: 21/12 - 20/03
# Primavera: 21/03 - 20/06
# Verão: 21/06 - 20/09
# Outono: 21/09 - 20/12
# Agrupamento por mês e dia
Stats1 <- Abates_by_Time %>%
group_by(Month,Day,Year) %>%
summarise(Avg = mean(numero_abates_data))
ggplot(Stats1, aes(x=factor(Month), y=Avg))+
geom_boxplot()+
ylab('Média de abates')+
xlab('Mês')+
theme_bw()
# Está um gráfico e dá para ver quando há mais abates, podia estar pior ahahah Mas ainda temos de ver se há uma melhor maneira de representar
# Passando para o segundo objetivo
# Relacionar abates com a exportação do INE
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organizacao/Dados_INE_2013_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),]
months <- c("Janeiro","Fevereiro", "Março", "Abril","Maio","Junho", "Julho", "Agosto", "Setemnro", "Outubro", "Novembro", "Dezembro")
y <- as.integer(factor(months, levels = month.name)) %>% na.omit(months) %>% na.action(months)
Datas_titulos <- Dados_exportações[c(1),]
#Estou e tentar converter a data em números eu sei que já fizemos isto, mas está complicado.
View(Datas_titulos)
View(Dados_exportações)
Dados_exportações$Data <- as.yearmon(paste(Dados_exportações$Year, Dados_exportações$Month),
"%Y %m")
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organizacao/Dados_INE_2013_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),]
Dados_exportações$Data <- as.yearmon(paste(Dados_exportações$Year, Dados_exportações$Month),
"%Y %m")
Dados_exportações <- Dados_exportações[c(8,13),] %>% as.data.frame(t(Dados_exportações))
Dados_exportações <- Dados_exportações[c(8,13),] %>% as.data.frame(t(Dados_exportações)) %>% na.omit()
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organizacao/Dados_INE_2013_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),]
Dados_exportações <- Dados_exportações[c(8,13),] %>%
rownames_to_column() %>%
gather(variable, value, -"Animais vivos e produtos do reino animal") %>%
spread("Animais vivos e produtos do reino animal", value)
Dados_exportações <- Dados_exportações[c(8,13),] %>%
rownames_to_column() %>%
gather(variable, value) %>%
spread("Animais vivos e produtos do reino animal", value)
Dados_exportações <- Dados_exportações[c(8,13),] %>%
rownames_to_column()
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organizacao/Dados_INE_2013_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),]
View(Dados_exportações)
View(Abates_by_Time)
Dados_exportações <- Dados_exportações[c(8,13),] %>% row.names(Dados_exportações)[1] <- "Data de Exportação"
Dados_exportações <- Dados_exportações[c(8,13),]
row.names(Dados_exportações)[1] <- "Data de Exportação"
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organizacao/Dados_INE_2013_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),]
row.names(Dados_exportações)[1] <- "Data de Exportação"
row.names(Dados_exportações)[1] <- "Data de Exportação"
print(Dados_exportações)
row.names( )[1] <- "Data de Exportação"
Dados_exportações <- Dados_exportações[c(8,13),] %>%
row.names(Dados_exportações)[1] <- "Data de Exportação"
row.names(Dados_exportações)[ ] <- "Data de Exportação"
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organizacao/Dados_INE_2013_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),]
row.names(Dados_exportações)[ ] <- "Data de Exportação"
row.names(Dados_exportações)[.] <- "Data de Exportação"
row.names(Dados_exportações)["Animais vivos e produtos do reino animal"] <- "Data de Exportação"
row.names(Dados_exportações)[1] <- "Data de Exportação"
ggplot(Dados_exportações, aes(x=factor(Month), y="Animais vivos e produtos do reino animal"))+
geom_boxplot()+
ylab('Média de abates')+
xlab('Mês')+
theme_bw()
ggplot(Dados_exportações, aes(x=factor( ), y="Animais vivos e produtos do reino animal"))+
geom_boxplot()+
ylab('Média de abates')+
xlab('Mês')+
theme_bw()
row.names(Dados_exportações)
row.names(Dados_exportações)[1] <- "Data de Exportação"
row.names(Dados_exportações)[2] <- "Animais vivos e produtos do reino animal"
row.names(Dados_exportações)
print(Dados_exportações)
Dados_exportações <- Dados_exportações[c(8,13),] %>% Dados_exportações[,-1]
Dados_exportações <- Dados_exportações[c(8,13),] %>% Dados_exportações[-1]
Dados_exportações <- Dados_exportações[c(8,13),] %>% Dados_exportações[-V1]
Dados_exportações <- Dados_exportações[c(8,13),] %>% select(Dados_exportações, -c(V1))
Dados_exportações <- Dados_exportações[c(8,13),] %>% select(Dados_exportações, -c(Dados_exportações, "V1"))
Dados_exportações <- Dados_exportações[c(8,13),] %>% select(Dados_exportações, -c(Dados_exportações, as.character("V1")))
Dados_exportações <- Dados_exportações[c(8,13),] %>% select(Dados_exportações, -c(1))
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organizacao/Dados_INE_2013_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),] %>% select(Dados_exportações, -c(1))
Dados_exportações <- Dados_exportações[c(8,13),]
Dados_exportações <- Dados_exportações[c(8,13),] %>% select(Dados_exportações, V1-V50)
as.data.frame(t(Dados_exportações))
Dados_exportações <- as.data.frame(t(Dados_exportações))
Dados_exportações$Data <- as.yearmon(paste(Dados_exportações$Year, Dados_exportações$Month),
"%Y %m")
Dados_exportações$V1 <- paste0("Data", Dados_exportações$V1)
Dados_exportações$V1 <- paste0("Data de exportação", Dados_exportações$V1$V1)
Dados_exportações <- paste0("Data de exportação", Dados_exportações$V1)
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organizacao/Dados_INE_2013_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),]
row.names(Dados_exportações)[1] <- "Data de Exportação"
row.names(Dados_exportações)[2] <- "Animais vivos e produtos do reino animal"
print(Dados_exportações)
Dados_exportações <- as.data.frame(t(Dados_exportações))
?
Paste0
?paste
?paste0
Dados_exportações$V1 <- paste ("Data de exportação", sep = " ", collapse = NULL, recycle0 = FALSE)
?separate
Dados_exportações$V1 <- separate(Dados_exportações, c("V1"))
Dados_exportações$V1 <- mutate(Mês = strsplit(as.character(V1), ",")) %>%
unnest(cols = V1)
Dados_exportações <- fread("C:/Users/ASUS/Desktop/Epi/Problema 4 Abates/Abates/Abates Organizacao/Dados_INE_2013_2017.csv", encoding = "UTF-8")
Dados_exportações <- Dados_exportações[c(8,13),]
row.names(Dados_exportações)[1] <- "Data de Exportação"
row.names(Dados_exportações)[2] <- "Animais vivos e produtos do reino animal"
print(Dados_exportações)
Dados_exportações <- as.data.frame(t(Dados_exportações))
Dados_exportações$"Data de Exportação" <- mutate(Mês = strsplit(as.character("Data de Exportação"), ",")) %>%
unnest(cols = "Data de Exportação")
separator("Data de Exportação")
?separate
separate(Dados_exportações, "Data de Exportação", into = "Mês" $ "Ano",sep = "[^[:alnum:]]+",
remove = TRUE,
convert = FALSE,
extra = "warn",
fill = "warn",
... )
separate(Dados_exportações, "Data de Exportação", into = "Mês" $ "Ano",sep = "[^[:alnum:]]+",
remove = TRUE,
convert = FALSE,
extra = "warn",
fill = "warn")
separate(Dados_exportações, V1, into = "Mês" $ "Ano",sep = "[^[:alnum:]]+",
remove = TRUE,
convert = FALSE,
extra = "warn",
fill = "warn")
separate(Dados_exportações, V1, into = "Mês",sep = "[^[:alnum:]]+",
remove = TRUE,
convert = FALSE,
extra = "warn",
fill = "warn")
x <- separate(Dados_exportações, V1, into = "Mês",sep = "[^[:alnum:]]+",
remove = TRUE,
convert = FALSE,
extra = "warn",
fill = "warn")
View(x)
